@page "/items/{itemId:guid}"
@using ShoeRateBlazor.Models
@inject ApiService ApiService
@inject NavigationManager Navigation

<h3 class="text-primary">Item Details</h3>

<button class="btn btn-primary mb-3" @onclick="BackToItems">Back to Items</button>

@if (item == null)
{
    <p class="text-primary">Loading...</p>
}
else
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@item.Name</h5>
            <p class="card-text">@item.Description</p>
            <p class="card-text"><small class="text-muted">Average Rating: @item.AverageRating</small></p>
            <p class="card-text"><small class="text-muted">Created By: @item.CreatedByUserName</small></p>
        </div>
    </div>

    <h4 class="text-primary">Ratings</h4>
    <button class="btn btn-danger mb-3" @onclick="RemoveRating">Remove Your Rating</button>
    <ul class="list-group">
        @foreach (var rating in ratings.Ratings)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@rating.User: @rating.Rating</span>
            </li>
        }
    </ul>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="PreviousRatingPage" disabled="@(!ratings.HasPrevious)">Previous</button>
        <button class="btn btn-primary" @onclick="NextRatingPage" disabled="@(!ratings.HasNext)">Next</button>
    </div>

    <h4 class="text-primary mt-3">Add Rating</h4>
    <div class="input-group mb-3">
        <select class="form-select" @bind="newRating">
            @for (int i = 1; i <= 10; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="AddRating">Add Rating</button>
    </div>
}

@code {
    [Parameter]
    public Guid ItemId { get; set; }

    private GetItemDetailsResponse item;
    private GetRatingListResponse ratings;
    private int newRating = 5;
    private int currentRatingPage = 1;

    protected override async Task OnInitializedAsync()
    {
        item = await ApiService.GetItemDetailsAsync(ItemId);
        await LoadRatings();
    }

    private async Task LoadRatings()
    {
        ratings = await ApiService.GetRatingsAsync(ItemId, currentRatingPage);
    }

    private async Task AddRating()
    {
        var request = new CreateRatingRequest { Rate = newRating };
        await ApiService.CreateRatingAsync(ItemId, request);
        await LoadRatings();
    }

    private async Task RemoveRating()
    {
        await ApiService.RemoveRatingAsync(ItemId);
        await LoadRatings();
    }

    private void BackToItems()
    {
        Navigation.NavigateTo("/items");
    }

    private async Task PreviousRatingPage()
    {
        if (ratings.HasPrevious)
        {
            currentRatingPage--;
            await LoadRatings();
        }
    }

    private async Task NextRatingPage()
    {
        if (ratings.HasNext)
        {
            currentRatingPage++;
            await LoadRatings();
        }
    }
}






