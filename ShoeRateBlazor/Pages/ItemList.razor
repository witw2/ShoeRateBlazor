@page "/items"
@using ShoeRateBlazor.Models
@inject ApiService ApiService
@inject NavigationManager Navigation

<h3 class="text-primary">Items</h3>

@if (items == null)
{
    <p class="text-primary">Loading...</p>
}
else
{
    <ul class="list-group">
        @foreach (var item in items.Items)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@item.Name - @item.AverageRating</span>
                <button class="btn btn-primary btn-sm" @onclick="() => NavigateToItemDetails(item.Id)">Details</button>
            </li>
        }
    </ul>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!items.HasPrevious)">Previous</button>
        <button class="btn btn-primary" @onclick="NextPage" disabled="@(!items.HasNext)">Next</button>
    </div>
}

@code {
    private GetItemListResponse items;
    private int currentPage = 1;
    private const int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        items = await ApiService.GetItemsAsync(pageSize, currentPage, null);
    }

    private void NavigateToItemDetails(Guid itemId)
    {
        Navigation.NavigateTo($"/items/{itemId}");
    }

    private async Task PreviousPage()
    {
        if (items.HasPrevious)
        {
            currentPage--;
            await LoadItems();
        }
    }

    private async Task NextPage()
    {
        if (items.HasNext)
        {
            currentPage++;
            await LoadItems();
        }
    }
}







